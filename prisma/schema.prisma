generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  
}

enum Role {
  ADMIN
  OPERATOR
}
model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
  role     Role?
}

model SensorType {
  id         Int        @id @default(autoincrement())
  name       String      @unique
  code       String      @unique
  unit       String
  sensorData SensorData[]
}

model SensorData {
  id           Int        @id @default(autoincrement())
  value        Float
  timestamp    DateTime   @default(now())
  code         String?
  sensorTypeId Int
  sensorType   SensorType @relation(fields: [sensorTypeId], references: [id])
}

model LampLog {
  id           Int        @id @default(autoincrement()) 
  on           Boolean
  isPJU        Boolean
  automated    Boolean
  timestamp    DateTime   @default(now())
}

model MonitorType {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  code          String    @unique
  unit          String    @unique
  monitorData   MonitorData[]
}

model MonitorData {
  id           Int        @id @default(autoincrement())
  value        Float
  timestamp    DateTime   @default(now())
  code         String?
  monitorTypeId Int
  monitorType   MonitorType @relation(fields : [monitorTypeId], references : [id])
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  createdAt DateTime @default(now())
}

// schema bot
enum Sender {
  USER
  BOT
}
model Document {
  id         String   @id @default(uuid()) @db.Uuid
  title      String   @db.VarChar(120)
  file       Bytes
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Conversations {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.VarChar(120)
  title      String    @db.VarChar(120)
  messages   Messages[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Messages {
  id             String        @id @default(uuid()) @db.Uuid
  conversationId String        @db.Uuid
  conversation   Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message        String
  sender         Sender
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}