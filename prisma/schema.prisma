generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  code String @unique @db.VarChar(20)
  name String @db.VarChar(255)

  users User[]
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique @db.VarChar(255)
  name       String?  @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  role_code  String   @db.VarChar(20)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  role Role @relation(fields: [role_code], references: [code])

  refreshTokens RefreshToken[]
}

model RefreshToken {
  id            Int      @id @default(autoincrement())
  user_id       Int
  access_token  String?  @db.Text @unique
  refresh_token String   @db.Text @unique
  created_at    DateTime @default(now()) @db.Timestamp(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([access_token], type: Hash)
  @@index([refresh_token], type: Hash)
}

model SensorType {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  code       String       @unique
  unit       String
  sensorData SensorData[]
}

model SensorData {
  id           Int        @id @default(autoincrement())
  value        Float
  timestamp    DateTime   @default(now())
  code         String?
  sensorTypeId Int
  sensorType   SensorType @relation(fields: [sensorTypeId], references: [id])
  pju_id       Int?
  pju          Pju?       @relation(fields: [pju_id], references: [id])
}

model LampLog {
  id        Int      @id @default(autoincrement())
  on        Boolean
  isPJU     Boolean
  automated Boolean
  timestamp DateTime @default(now())
}

model MonitorType {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  code        String        @unique
  unit        String        @unique
  monitorData MonitorData[]
}

model MonitorData {
  id            Int         @id @default(autoincrement())
  value         Float
  timestamp     DateTime    @default(now())
  code          String?
  monitorTypeId Int
  monitorType   MonitorType @relation(fields: [monitorTypeId], references: [id])
  pju_id        Int?
  pju           Pju?        @relation(fields: [pju_id], references: [id])
}

model Pju {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  address     String?
  lat         String?
  longtitude  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  config      Config[]
  monitorData MonitorData[]
  sensorData  SensorData[]
}

model Config {
  id     Int     @id @default(autoincrement())
  name   String
  value  String?
  pju_id Int
  pju    Pju     @relation(fields: [pju_id], references: [id])
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  createdAt DateTime @default(now())
}

enum Sender {
  USER
  BOT
}

model Document {
  id        String   @id @default(uuid()) @db.Uuid
  title     String   @db.VarChar(120)
  path      String   @db.VarChar(120)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title])
  @@index([path])
  @@map("documents")
}

model Conversation {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.VarChar(120)
  title     String    @db.VarChar(120)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid()) @db.Uuid
  conversationId String       @db.Uuid
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message        String
  sender         Sender
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("messages")
}
